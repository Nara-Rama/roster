package com.example.roster.web;

import java.util.Optional;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.http.MediaType;

import com.example.roster.persistence.Student;
import com.example.roster.service.StudentService;
import com.example.roster.persistence.ValidationException;

/*
 * Student controller
 */
@RestController
@RequestMapping(value="/students")
public class StudentController {
    @Autowired
    private StudentService studentService;

    @GetMapping(value="/{id}", produces = "application/json")
    public Student getStudent(@PathVariable("id") Long id) {
        Optional<Student> student = studentService.getStudent(id);

        if (!student.isPresent())
            return null;

        return student.get();
    }

    @PostMapping(value="/", produces = MediaType.APPLICATION_JSON_VALUE,
            consumes = MediaType.APPLICATION_JSON_VALUE)
    public Student createStudent(@Valid @RequestBody Student student) {
        //StudentId should be generated by the server
        student.setId(null);

        //Validate if the student exists
        Optional<Student> dbStudent = studentService.getStudent(student.getUsername());

        if (dbStudent.isPresent()) {
            throw new ValidationException("A student with the same name exists: " + student.getUsername());
        }

        return studentService.saveStudent(student);
    }

    @PutMapping(value="/{id}", produces = "application/json")
    public Student updateStudent(@Valid @PathVariable("id") Long id, @RequestBody Student student) {
        //Path value overrides the body value
        student.setId(id);

        //Validate if the student name has any impact
        Optional<Student> dbStudent = studentService.getStudent(student.getUsername());

        if (dbStudent.isPresent() && dbStudent.get().getId().longValue() != student.getId()) {
            throw new ValidationException("A student with the same name exists: " + student.getUsername());
        }

        return studentService.saveStudent(student);
    }

    @GetMapping(value="/{id}/activate", produces = "application/json")
    public Student activateStudent(@PathVariable("id") Long id) {
        return studentService.activateStudent(id);
    }

    @GetMapping(value="/{id}/deactivate", produces = "application/json")
    public Student deactivateStudent(@PathVariable("id") Long id) {
        return studentService.deactivateStudent(id);
    }
}